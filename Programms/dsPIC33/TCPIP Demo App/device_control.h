#ifndef __DEVICE_CONTROL_H_
#define __DEVICE_CONTROL_H_
#include "GenericTypeDefs.h"

// Таймеры
typedef enum _TIMERS_ID{
    T1, T2, T3, T4, T5, T6, T7, T8, T9
} TIMERS_ID;
typedef enum _TMR_CLOCK_SOURCE {
    CLOCK_SOURCE_INTERNAL, CLOCK_SOURCE_EXTERNAL
} TMR_CLOCK_SOURCE;

typedef enum _TMR_GATED_MODE {
    GATED_DISABLE, GATED_ENABLE
}TMR_GATED_MODE;

typedef enum _TMR_PRESCALER {
    PRE_1_1, PRE_1_8, PRE_1_64, PRE_1_256
}TMR_PRESCALER;

typedef enum _TMR_IDLE {
    IDLE_ENABLE, IDLE_DISABLE
} TMR_IDLE;

typedef enum _TMR_BIT_MODE {
    BIT_16, BIT_32
}TMR_BIT_MODE;

typedef enum _TMR1_SYNC {
    SYNC_ENABLE, SYNC_DISABLE
} TMR1_SYNC;

int InitTimer(TIMERS_ID id, TMR_CLOCK_SOURCE source, TMR_GATED_MODE gated, TMR_PRESCALER pre, TMR_IDLE idle, TMR_BIT_MODE bit, TMR1_SYNC sync);
int SetTimerInt(TIMERS_ID id, BYTE Level, BOOL enabled);
int SetTimerValue(TIMERS_ID id, WORD TmrValue, WORD PRValue);
int SetTimerState(TIMERS_ID id, BOOL enabled);
// DMA
typedef enum _DMA_ID{
    DMA0, DMA1, DMA2, DMA3, DMA4, DMA5, DMA6, DMA7
} DMA_ID;

typedef enum _DMA_DATA_SIZE_BIT {
    SIZE_WORD, SIZE_BYTE
}DMA_DATA_SIZE_BIT;

typedef enum _DMA_TRANSFER_DIRECTION{
    DEVICE_TO_RAM, RAM_TO_DEVICE
} DMA_TRANSFER_DIRECTION;

typedef enum _DMA_COMPLETE_BLOCK_INT{
    FULL_BLOCK, HALF_BLOCK
}DMA_COMPLETE_BLOCK_INT;

typedef enum _DMA_NULL_DATA_MODE {
    NORMAL_OPS, NULL_DATA_TO_DEVICE
}DMA_NULL_DATA_MODE;

typedef enum _DMA_ADRESING_MODE {
    REG_INDIRECT_W_POST_INC, REG_INDIRECT, DEVICE_INDIRECT_ADDR, 
}DMA_ADRESING_MODE;

typedef enum _DMA_OPERATION_MODE {
    CONTINUOUS, ONE_SHOT, CONTINUE_PP, ONE_SHOT_PP,
}DMA_OPERATION_MODE;

typedef enum _DMA_DEVICE_IRQ {
    IRQ_INT0 = 0, IRQ_IC1=1, IRQ_IC2=5, IRQ_OC1=2, IRQ_OC2=6, IRQ_TMR2=7, IRQ_TMR3=8, IRQ_SPI1=10, IRQ_SPI2=33, IRQ_UART1_RX, IRQ_UART1_TX, IRQ_UART2_RX, IRQ_UART2_TX, IRQ_ADC1, IRQ_ADC2
} DMA_DEVICE_IRQ;

int DMAInit(DMA_ID id, DMA_DATA_SIZE_BIT bit, DMA_TRANSFER_DIRECTION dir, DMA_COMPLETE_BLOCK_INT half, DMA_NULL_DATA_MODE nullw, DMA_ADRESING_MODE addr, DMA_OPERATION_MODE mode);
int DMASelectDevice(DMA_ID id, DMA_DEVICE_IRQ irq, WORD * DEVICE_REG);
int DMASelectBuffer(DMA_ID id, int DMAbufA, int DMAbufB, WORD Count);
int DMASetState(DMA_ID id, BOOL enabled, BOOL force);
int DMAGetPPState(DMA_ID id);
int DMASetInt(DMA_ID id, BYTE Level, BOOL enabled);

#endif //__DEVICE_CONTROL_H_
